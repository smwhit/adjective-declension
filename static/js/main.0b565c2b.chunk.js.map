{"version":3,"sources":["Grammar.js","App.js","serviceWorker.js","index.js"],"names":["Gender","Masculine","name","Feminine","Neuter","Plural","Case","Nominative","Accusative","Dative","Signal","Yes","No","Selections","gender","case","signal","ending","App","props","handleSignalChange","event","setState","target","value","handleGenderChange","handleCaseChange","state","className","this","onChange","Object","keys","map","x","key","style","marginBottom","borderBottom","selections","calculate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b565c2b.chunk.js","sourcesContent":["export const Gender = {\n    Masculine: { name: \"masculine\"},\n    Feminine: {name: \"feminine\"},\n    Neuter: { name: \"neuter\"},\n    Plural: { name: \"plural\"}\n};\n\nexport const Case = {\n    Nominative: {name: \"nominative\"},\n    Accusative: {name: \"accusative\"},\n    Dative: {name: \"dative\"}\n}\n\nexport const Signal = {\n    Yes: \"Yes\",\n    No: \"No\"\n}\n\nexport const Selections = {\n    gender: Gender.Masculine,\n    case: Case.Nominative,\n    signal: Signal.Yes,\n    ending: \"\"\n}\n\nexport const calculate = selections => {\n    if(selections.signal === \"Yes\") {\n      if(selections.case === \"dative\") return \"en\";\n      if(selections.case === \"nominative\") {\n        if(selections.gender === \"plural\") {\n          return \"en\";\n        }\n      } else if(selections.case === \"accusative\") {\n        if(selections.gender === \"masculine\" || selections.gender === \"plural\") {\n          return \"en\"\n        }\n      } \n    } else {\n      if(selections.case === \"nominative\") {\n        if(selections.gender === \"masculine\") {\n          return \"er\";\n        }\n        if(selections.gender === \"neuter\") {\n          return \"es\";\n        }\n      }\n      if(selections.case === \"accusative\") {\n        if(selections.gender === \"masculine\") {\n          return \"en\";\n        }\n        if(selections.gender === \"neuter\") {\n          return \"es\";\n        }\n      }\n      if(selections.case === \"dative\") {\n        if(selections.gender === \"masculine\") {\n          return \"em\";\n        }\n        if(selections.gender ===\"feminine\") {\n          return \"er\";\n        }\n        if(selections.gender === \"neuter\") {\n          return \"em\";\n        }\n        if(selections.gender === \"plural\") {\n          return \"en\";\n        }\n      }\n    }\n    return \"e\";\n}","import React from \"react\";\nimport './App.css';\nimport { Case, Gender,Selections, Signal, calculate } from \"./Grammar\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { gender: Selections.gender.name,\n                   case: Selections.case.name,\n                   signal: Selections.signal,\n                   ending: Selections.ending};\n  }\n\n  handleSignalChange = (event) => {\n    this.setState({signal: event.target.value});\n  }\n\n  handleGenderChange = (event) => {\n    this.setState({gender: event.target.value});\n  }\n\n  handleCaseChange = (event) => {\n    this.setState({case: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"option\">\n          <span className=\"question\">Does it have an article with a case signal?</span>\n          <span>\n            <select value={this.state.signal} onChange={this.handleSignalChange}>\n              { Object.keys(Signal).map(x => \n                <option key={Signal[x]} value={x}>{x}</option>\n              )}\n          </select>\n          </span>\n          </div>\n          <div className=\"option\">\n          <span className=\"question\">What is the gender of the noun?</span>\n          <span>\n            <select value={this.state.gender} onChange={this.handleGenderChange}>\n              { Object.keys(Gender).map(x => \n                <option key={Gender[x].name} value={Gender[x].name}>{Gender[x].name}</option>\n              )}\n            </select>\n          </span>\n          </div>\n          <div className=\"option\" style={{marginBottom: \"2px\", borderBottom: \"3px solid #4588ba\" }}>\n            <span className=\"question\">What is the case?</span>\n            <span>\n              <select value={this.state.case} onChange={this.handleCaseChange}>\n              { Object.keys(Case).map(x => \n                <option key={Case[x].name} value={Case[x].name}>{Case[x].name}</option>\n              )}\n              </select>\n            </span>\n          </div>\n          <div className=\"option\">Adjective should end with: +<strong>{ calculate(this.state) }</strong> </div>\n            {/* <div><span>{this.state.signal}</span>/<span>{this.state.gender}</span>/<span>{this.state.case}</span> </div>*/}\n        </header>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}